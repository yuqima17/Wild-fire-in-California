<!DOCTYPE HTML>
<html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="initial-scale=1, maximum-scale=1, user-scalable=no">
        <title>California Wild Fire - Web Map</title>
        <link rel="stylesheet" href="https://js.arcgis.com/4.10/esri/css/main.css">
        <script src="https://js.arcgis.com/4.10/"></script>
        <link rel="stylesheet" href="/home.css">
    </head>
    <body>
        <div id="viewDiv"></div>
        <span id="layerToggle">
          Fire Stations<input type="checkbox" id="stationLayer" checked> &nbsp
           Burn History locations<input type="checkbox" id="hazardLayer" checked>
          <!--<span id="clusterDiv">Use clustering?<input type="checkbox" id="use-clustering" checked></span>-->
        </span>
        
        <div id="legend"></div>
        <script>
            require([
              "esri/Map",
              "esri/WebMap",
              "esri/views/MapView",
              "esri/geometry/Point",
              "esri/layers/FeatureLayer",
              "esri/widgets/Legend",
              "esri/widgets/ScaleBar",
             
            ], function(Map,WebMap,MapView,Point,FeatureLayer,Legend,ScaleBar) {
              var map = new WebMap({
                portalItem:{
                  id:"826498a48bd0424f9c9315214f2165d4"
                }
                 
              });
            
              var view = new MapView({
                container: "viewDiv",  // Reference to the DOM node that will contain the view
                map: map,
                center:[-116.93,32.8004],
                zoom:10// References the map object created in step 3
              });
              
              
//create stations layer              
var Renderer_st = {
  type: "simple",
  
  symbol: {
          type: "picture-marker", // autocasts as new SimpleMarkerSymbol()
          url: "/pictures/blue1.png",
           width: "15px",
           height: "15px"
          
  }
}
 
  var fields_st = [
      {
        name: "ObjectID",
        alias: "ObjectID",
        type: "oid"
      },
      {
        name: "title",
        alias: "title",
        type: "string"
      }, {
        name: "type",
        alias: "type",
        type: "string"
      }, {
          name:"district",
          alias:"district",
          type:"string"
      },{
          name:"phone",
          alias:"phome",
          type:"string"
      }];
      
  var pTemplate_st = {
        title: "{title}",
        content: [{
          type: "fields",
          fieldInfos: [{
            fieldName: "type",
            label: "Operation Type",
            visible: true
          }, {
            fieldName: "district",
            label: "district",
            visible: true
          }, {
            fieldName: "phone",
            label: "phone",
            visible: true
          }]
        }],
       
      };

  //create graphics from json
  var i=0;
  var result_array=[];
  <% stations_json["features"].forEach(function(feature){ %>
    i=i+1;
      var lat=<%=feature["geometry"]["y"]%>;
      var lon=<%=feature["geometry"]["x"]%>;
      
      var result={
        geometry:new Point({
          x:lon,
          y:lat,
        }),
        attributes:{
          ObjectID: i,
              title: '<%= feature["attributes"]["STAT_NAME"]%>',
              type: '<%=feature["attributes"]["STAT_TYPE"]%>',
              district:'<%=feature["attributes"]["DIST_NAME"]%>',
              phone:'<%=feature["attributes"]["PHONE_NUM"]%>'
        }
      }
      result_array.push(result);
  <% })%>



  
  var layer_station = new FeatureLayer({
  source: result_array,  // autocast from an array of esri/Graphic
  // create an instance of esri/layers/support/Field for each field object
  fields: fields_st,
  objectIdField: "ObjectID",
  popupTemplate: pTemplate_st,
  renderer: Renderer_st,
  //renderer: quakesRenderer  // set the visualization on the layer
});

map.add(layer_station);
    var stationToggle = document.getElementById("stationLayer");
        stationToggle.addEventListener("change", function () {
          layer_station.visible = stationToggle.checked;
        });

//layer_1 created
//create layer2
      var Renderer_ha = {
        type: "simple", // autocasts as new SimpleRenderer()
        symbol: {
          type: "simple-marker", // autocasts as new SimpleMarkerSymbol()
          style: "x",
          size: 20,
          color: [211, 255, 0,0],
          outline: {
            width: 1,
            color: "#AA3839",
            style: "solid"
          }
        },
        visualVariables: [{
          type: "size",
          field: "area",
          
          minDataValue: 0.466191,  // features where < 10% of the pop in poverty
          maxDataValue: 270675,  // features where > 30% of the pop in poverty
          minSize: 5,  // size of marker in pts
          maxSize: 20  // size of marker in pts
        }]
      };
  
 var fields_ha = [
      {
        name: "ObjectID",
        alias: "ObjectID",
        type: "oid"
      },
      {
        name: "area",
        alias: "area",
        type: "double"
      },{
        name:"date",
        alias:"date",
        type:"string"
      },{
        name:"name",
        alias:"name",
        type:"string"
      },{
        name:"cause",
        alias:"cause",
        type:"string"
      }];
var pTemplate_ha = {
        title: "Fire Name: {name}",
        content: [{
          type: "fields",
          fieldInfos: [{
            fieldName: "area",
            label: "Acres",
            visible: true
          },{
            fieldName: "date",
            label: "date",
            visible: true
          },{
            fieldName: "cause",
            label: "cause",
            visible: true
          }]
        }],
       
      };
var j=0;
var result_array_ha=[];
 <% hazard_json["features"].forEach(function(feature){ %>
 console.log(j)
    j=j+1;
      var lat=<%=feature["geometry"]["y"]%>;
      var lon=<%=feature["geometry"]["x"]%>;
      
      var result={
        geometry:new Point({
          x:lon,
          y:lat,
        }),
        attributes:{
          ObjectID: j,
          area: <%= feature["attributes"]["ACRES_CALC"]%>,
          date: '<%= feature["attributes"]["ALARM_DATE"]  %>',
          name: '<%= feature["attributes"]["FIRE_NAME"] %>',
          cause:'<%= feature["attributes"]["CAUSE"] %>'
             
        }
      }
      result_array_ha.push(result);
  <% })%>

 var layer_hazard = new FeatureLayer({
  source: result_array_ha,  // autocast from an array of esri/Graphic
  // create an instance of esri/layers/support/Field for each field object
  fields: fields_ha,
  objectIdField: "ObjectID",
  popupTemplate: pTemplate_ha,
  renderer: Renderer_ha,
  //renderer: quakesRenderer  // set the visualization on the layer
});
map.add(layer_hazard);
    var hazardToggle = document.getElementById("hazardLayer");
        hazardToggle.addEventListener("change", function () {
          layer_hazard.visible = hazardToggle.checked;
        });
view.when(function(){
  var legend=new Legend({
    view:view,
    container:"legend",
    layerInfos:[{
      layer: layer_hazard,
    title: "Burn History Location and Area in Acres"
    }]
  });
  legend.style = {
  type: "classic",
  layout: "auto"
};
  view.ui.add(legend, "bottom-right");
})
var scaleBar = new ScaleBar({
  view: view
});
// Add widget to the bottom left corner of the view
view.ui.add(scaleBar, {
  position: "bottom-left"
});
     


});
        </script>
    </body>
</html>